import groovy.json.JsonBuilder

plugins {
    id("java-library")
    id("maven-publish")
}

group(project.maven_group)
version(project.parent.version)

base {
    String versionSuffix = ''
    if (System.getenv("BUILD_RELEASE") != "true") {
        String buildNumber = System.getenv("BUILD_ID")
        versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SHAPSHOT'
    }
    archivesBaseName("${project.archives_base_name}-all" + "-v" + project.mod_version + versionSuffix)
}

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

jar {
    // disable cache
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/submods/META-INF/jars")

        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }

            into("build/tmp/submods/META-INF/jars")
        }
    }

    from("${rootDir}/LICENSE")
    from("build/tmp/submods")
}

processResources {
    // disable cache
    outputs.upToDateWhen { false }
    ArrayList<?> mc_condition = []
    ArrayList<?> jars = []

    fabric_subprojects.each({
        mc_condition.add("${it.minecraft_dependency}")
        jars.add(["file": "META-INF/jars/${project.archives_base_name}-${it.minecraft_version}-${project.version}.jar"])
    })

    from("${rootDir}/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "name": project.mod_name,
                "version": project.version,
                "sub_jars": new JsonBuilder(jars).toPrettyString()
        ]
        expand valueMap
    }
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        mavenLocal()

        maven {
            url("$rootDir/publish")
        }
    }
}